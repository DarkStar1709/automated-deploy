import fs from "fs-extra";
import path from "path";
import chalk from "chalk";
import ejs from "ejs";
import logger from "../utils/logger.js"; // if you're using ESModules
import { GoogleGenerativeAI } from "@google/generative-ai";

// Setup Gemini
const gemini = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Framework Detection
export const detectFramework = async (projectPath) => {
  if (fs.existsSync(path.join(projectPath, "package.json"))) {
    const pkg = JSON.parse(fs.readFileSync(path.join(projectPath, "package.json")));
    if (pkg.dependencies?.express || pkg.devDependencies?.express) {
      return "node-express";
    }
  }

  if (fs.existsSync(path.join(projectPath, "requirements.txt"))) {
    const content = fs.readFileSync(path.join(projectPath, "requirements.txt"), "utf-8");
    if (content.toLowerCase().includes("django")) {
      return "python-django";
    }
  }

  if (fs.existsSync(path.join(projectPath, "go.mod"))) {
    return "go";
  }

  if (fs.existsSync(path.join(projectPath, "pom.xml"))) {
    return "java-springboot";
  }

  return null;
};

// Prompt templates
export async function generateDockerfile(framework, projectPath) {
  try {
    const model = gemini.getGenerativeModel({ model: "gemini-pro" });

    let context = "";
    if (framework === "node-express") {
      const pkgPath = path.join(projectPath, "package.json");
      if (fs.existsSync(pkgPath)) {
        const pkg = JSON.parse(await fs.readFile(pkgPath, "utf-8"));
        context += `Project dependencies:\n${JSON.stringify(pkg.dependencies, null, 2)}\n`;
        context += `Project scripts:\n${JSON.stringify(pkg.scripts, null, 2)}\n`;
      }
    }

    if (framework === "python-django") {
      const reqPath = path.join(projectPath, "requirements.txt");
      if (fs.existsSync(reqPath)) {
        const content = await fs.readFile(reqPath, "utf-8");
        context += `requirements.txt content:\n${content}\n`;
      }
    }

    // You can add similar logic for go.mod or pom.xml later

    const prompt = `
You are a DevOps expert.

Generate a **production-grade Dockerfile** for a ${framework.replace("-", " ")} application.

Project context:
${context}

Requirements:
- Best practices for this stack
- Proper base image
- Port exposure
- Entry point (start command)
- Any build/compile steps if necessary

Output ONLY the Dockerfile content.
    `.trim();

    const result = await model.generateContent(prompt);
    const response = await result.response;

    return response.text();
  } catch (error) {
    logger.error("‚ùå Gemini API Error:", error.message);
    return null;
  }
}
// Fallback from template
const fallbackFromTemplate = async (framework, projectPath) => {
  const templatePath = path.resolve(`templates/Dockerfile-${framework}.ejs`);
  const outputPath = path.join(projectPath, "Dockerfile");

  if (fs.existsSync(templatePath)) {
    const rendered = await ejs.renderFile(templatePath, {}, {});
    await fs.writeFile(outputPath, rendered);
    logger.warn("‚ö†Ô∏è  Fallback Dockerfile template used.");
    logger.fileOperation("create", outputPath);
  } else {
    console.log(chalk.red(`No fallback template found for ${framework}`));
  }
};

// Main entry
const analyzeProject = async (projectPath, useAI = true) => {
  logger.title("üîç Analyzing project...");

  const framework = await detectFramework(projectPath);
  if (!framework) {
    logger.error("‚ùå Could not detect supported framework.");
    return;
  }

  logger.success(`üì¶ Detected framework: ${framework}`);

  const dockerfilePath = path.join(projectPath, "Dockerfile");
  if (fs.existsSync(dockerfilePath)) {
    logger.warn("‚ö†Ô∏è  Dockerfile already exists. Use --force to overwrite.");
    return;
  }

 
  let content = null;
  const spinnerId = "docker-gen";

  if (useAI) {
    logger.startSpinner(spinnerId, "Generating Dockerfile using Gemini AI...");
    content = await generateDockerfile(framework,projectPath);
    if (content) {
      logger.succeedSpinner(spinnerId, "‚úÖ Dockerfile generated by Gemini AI");
    } else {
      logger.failSpinner(spinnerId, "‚ùå Failed to generate with AI. Using fallback...");
    }
  }

  if (content) {
    await fs.writeFile(dockerfilePath, content);
    logger.fileOperation("create", dockerfilePath);
  } else {
    console.log(chalk.yellow("üõ† Falling back to EJS template..."));
    await fallbackFromTemplate(framework, projectPath);
  }
};

export default analyzeProject;
